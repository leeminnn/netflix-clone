[{"C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\index.js":"1","C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\App.js":"2","C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\reportWebVitals.js":"3","C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\Row.js":"4","C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\request.js":"5","C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\axios.js":"6","C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\Banner.js":"7","C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\Nav.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":907,"mtime":1612198844202,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":2675,"mtime":1612200220309,"results":"13","hashOfConfig":"10"},{"size":939,"mtime":1612188424577,"results":"14","hashOfConfig":"10"},{"size":144,"mtime":1612126235364,"results":"15","hashOfConfig":"10"},{"size":1662,"mtime":1612193476794,"results":"16","hashOfConfig":"10"},{"size":983,"mtime":1612196910526,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"dcgk0c",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\index.js",[],["36","37"],"C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\App.js",[],"C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\reportWebVitals.js",[],"C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\Row.js",["38"],"import React, {useState, useEffect} from 'react';\r\nimport axios from './axios';\r\n// import APIKEY from './request'\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchURL, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    // console.log(fetchURL)\r\n    useEffect(()=> {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchURL);\r\n                // {\r\n                //     headers: {\r\n                //         Authorization: `Bearer ${APIKEY}`\r\n                //     },\r\n                // })\r\n                // .then((request) => {\r\n                //     //API json response\r\n                //     console.log(request.data.result)\r\n                // })\r\n                // .catch((err) => {\r\n                //     if (err.response) {\r\n                //         console.log(err.response.status);\r\n                //     }\r\n                // });\r\n            // console.log(request.data.results);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchURL]);\r\n\r\n    // console.table(movies);\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay:1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            // console.log(movie?.name);\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(\r\n                url => {\r\n                //https://www.youtube.com/watch?v=XtMThy8QKqU\r\n                const urlParams = new URLSearchParams(new URL(url).search); \r\n                console.log(urlParams);\r\n                setTrailerUrl(urlParams.get(\"v\")); }\r\n            ) .catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n\r\n                {movies.map(movie =>(\r\n                    <img \r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\request.js",[],"C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\axios.js",[],"C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\Banner.js",[],"C:\\Users\\Kam Leemin\\OneDrive\\Documents\\Personal\\NetflixClone\\netflix-clone\\src\\Nav.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":54,"column":13,"nodeType":"45","messageId":"46","endLine":61,"endColumn":21,"fix":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-whitespace-before-property","Unexpected whitespace before property catch.","MemberExpression","unexpectedWhitespace",{"range":"50","text":"51"},"no-global-assign","no-unsafe-negation",[1957,1959],"."]